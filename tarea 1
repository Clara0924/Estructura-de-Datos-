 
 class Nodo:
    def __init__(self, clave, valor, izquierdo=None, derecho=None, padre=None):
        self.clave = clave
        self.carga = valor
        self.hijoIzquierdo = izquierdo
        self.hijoDerecho = derecho
        self.padre = padre

    def tieneHijoIzquierdo(self):
        return self.hijoIzquierdo

    def tieneHijoDerecho(self):
        return self.hijoDerecho

    def esHijoIzquierdo(self):
        return self.padre and self.padre.hijoIzquierdo == self

    def esHijoDerecho(self):
        return self.padre and self.padre.hijoDerecho == self

    def esRaiz(self):
        return not self.padre

    def esHoja(self):
        return not (self.hijoDerecho or self.hijoIzquierdo)

    def tieneHijo(self):
        return self.hijoIzquierdo or self.hijoDerecho

    def tieneAmbosHijos(self):
        return self.hijoDerecho and self.hijoIzquierdo

    def reemplazarDatoDeNodo(self, clave, valor, hijoIzquierdo, hijoDerecho):
        self.clave = clave
 
 
 self.valor = valor
        self.hijoIzquierdo = hijoIzquierdo
        self.hijoDerecho = hijoDerecho
        if self.tieneHijoIzquierdo():
            self.hijoIzquierdo.padre = self
        if self.tieneHijoDerecho():
            self.hijoDerecho.padre = self

    def encontrarSucesor(self):
        sucesor = None
        if self.tieneHijoDerecho():
            sucesor = self.hijoDerecho.encontrarMin()
        else:
            if self.padre:
                if self.esHijoDerecho():
                    sucesor = self.padre
                else:
                    self.padre.hijoDerecho = None
                    sucesor = self.padre.encontrarSucesor()
                    self.padre.hijoDerecho = self
        return sucesor

    def encontrarMin(self):
        actual = self
        while actual.tieneHijoIzquierdo():
            actual = actual.hijoIzquierdo
        return actual

    def empalmar(self):
        if self.esHoja():
            if self.esHijoIzquierdo():
                self.padre.hijoIzquierdo = None
            else:
                self.padre.hijoDerecho = None
        elif self.tieneHijo():
            if self.tieneHijoIzquierdo():
                if self.esHijoIzquierdo():
                    self.padre.hijoIzquierdo = self.hijoIzquierdo
                else:
                    self.padre.hijoDerecho = self.hijoIzquierdo
                self.hijoIzquierdo.padre = self.padre
            else:
                if self.esHijoIzquierdo():
                    self.padre.hijoIzquierdo = self.hijoDerecho
                else:
                    self.padre.hijoDerecho = self.hijoDerecho
                self.hijoDerecho.padre = self.padre

    def __iter__(self):
        if self:
            if self.tieneHijoIzquierdo():
                for elem in self.hijoIzquierdo:
                    yield elem
            yield self.clave

            if self.tieneHijoDerecho():
                for elem in self.hijoDerecho:
                    yield elem

# Arbol Binario de Busqueda
class Arbol:
    def __init__(self):
        self.raiz = None
        self.tamano = 0

    def longitud(self):
        return self.tamano

    def __len__(self):
        return self.tamano

    def __iter__(self):
        return self.raiz.__iter__()


    def agregar(self, clave, valor):
        if self.raiz:
            self._agregar(clave, valor, self.raiz)
        else:
            self.raiz = Nodo(clave, valor)

    def _agregar(self, clave, valor, nodoActual):
        if clave < nodoActual.clave:
            if nodoActual.tieneHijoIzquierdo():
                self._agregar(clave, valor, nodoActual.hijoIzquierdo)
            else:
                nodoActual.hijoIzquierdo = Nodo(clave, valor, padre=nodoActual)
        else:
            if nodoActual.tieneHijoDerecho():
                self._agregar(clave, valor, nodoActual.hijoDerecho)
            else:
                nodoActual.hijoDerecho = Nodo(clave, valor, padre=nodoActual)

    def __setitem__(self, clave, valor):
        self.agregar(clave, valor)

    def obtener(self, clave):
        if self.raiz:
            result = self._obtener(clave, self.raiz)
            if result:
                return result.carga
            else:
                return None
        else:
            return None

    def _obtener(self, clave, nodoActual):
        if not nodoActual:
            return None
        elif nodoActual.clave == clave:
            return nodoActual
        elif clave < nodoActual.clave:
            return self._obtener(clave, nodoActual.hijoIzquierdo)
        else:
            return self._obtener(clave, nodoActual.hijoDerecho)

    def __getitem__(self, clave):
        return self.obtener(clave)

    def __contains__(self, clave):
        if self._obtener(clave, self.raiz):
            return True
        else:
            return False

    def eliminar(self, clave):
        if self.tamano > 1:
            nodoAEliminar = self._obtener(clave, self.raiz)
            if nodoAEliminar:
                self.remover(nodoAEliminar)
            else:
                raise KeyError("Error, la clave no está en el arbol")
        elif self.tamano == 1 and self.raiz.clave == clave:
            self.raiz = None
            self.tamano = self.tamano - 1

        else:
            raise KeyError("Error, la clave no está en el arbol")

    def __delitem__(self, clave):
        self.eliminar(clave)

    def remover(self, nodoActual):
        if nodoActual.esHoja():
            if nodoActual == nodoActual.padre.hijoIzquierdo:
                nodoActual.padre.hijoIzquierdo = None
            else:
                nodoActual.padre.hijoDerecho = None
        else:
            if nodoActual.tieneHijoIzquierdo():
                if nodoActual.esHijoIzquierdo():
                    nodoActual.hijoIzquierdo.padre = nodoActual.padre
                    nodoActual.padre.hijoIzquierdo = nodoActual.hijoIzquierdo
                elif nodoActual.esHijoDerecho():
                    nodoActual.hijoIzquierdo.padre = nodoActual.padre
                    nodoActual.padre.hijoDerecho = nodoActual.hijoIzquierdo
                else:
                    nodoActual.reemplazarDatoDeNodo(nodoActual.hijoIzquierdo.clave,
                                                    nodoActual.hijoIzquierdo.carga,
                                                    nodoActual.hijoIzquierdo.hijoIzquierdo,
                                                    nodoActual.hijoIzquierdo.hijoDerecho)
            elif nodoActual.tieneAmbosHijos():
                sucesor = nodoActual.encontrarSucesor()
                sucesor.empalmar()
                nodoActual.clave = sucesor.clave
                nodoActual.carga = sucesor.carga
            else:
                if nodoActual.esHijoIzquierdo():
                    nodoActual.hijoDerecho.padre = nodoActual.padre
                    nodoActual.padre.hijoIzquierdo = nodoActual.hijoDerecho
                elif nodoActual.esHijoDerecho():
                    nodoActual.hijoDerecho.padre = nodoActual.padre
                    nodoActual.padre.hijoDerecho = nodoActual.hijoDerecho
                else:
                    nodoActual.reemplazarDatoDeNodo(nodoActual.hijoDerecho.clave,
                                                    nodoActual.hijoDerecho.carga,
                                                    nodoActual.hijoDerecho.hijoIzquierdo,
                                                    nodoActual.hijoDerecho.hijoDerecho)

    def inorder(self,nodo):
        if nodo == None:
            return None
        else:
            self.inorder(nodo.hijoIzquierdo)
            print(nodo.carga)
            self.inorder(nodo.hijoDerecho)
    
    def preorder(self, nodo):
        if nodo == None:
            return None
        else:
            print(nodo.carga)
            self.preorder(nodo.hijoIzquierdo)
            self.preorder(nodo.hijoDerecho)

    def postorder(self, nodo):
        if nodo == None:
            return None
        else:
            self.postorder(nodo.hijoIzquierdo)
            self.postorder(nodo.hijoDerecho)
            print(nodo.carga)
